[
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "or_",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Character",
        "importPath": "app.models.character",
        "description": "app.models.character",
        "isExtraImport": true,
        "detail": "app.models.character",
        "documentation": {}
    },
    {
        "label": "Character",
        "importPath": "app.models.character",
        "description": "app.models.character",
        "isExtraImport": true,
        "detail": "app.models.character",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "URLSafeTimedSerializer",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "BadSignature",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "SignatureExpired",
        "importPath": "itsdangerous",
        "description": "itsdangerous",
        "isExtraImport": true,
        "detail": "itsdangerous",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "importPath": "app.schemas.user_schema",
        "description": "app.schemas.user_schema",
        "isExtraImport": true,
        "detail": "app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "make_google_blueprint",
        "importPath": "flask_dance.contrib.google",
        "description": "flask_dance.contrib.google",
        "isExtraImport": true,
        "detail": "flask_dance.contrib.google",
        "documentation": {}
    },
    {
        "label": "g",
        "importPath": "flask_dance.contrib.google",
        "description": "flask_dance.contrib.google",
        "isExtraImport": true,
        "detail": "flask_dance.contrib.google",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "cross_origin",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "importPath": "app.models.cart_item",
        "description": "app.models.cart_item",
        "isExtraImport": true,
        "detail": "app.models.cart_item",
        "documentation": {}
    },
    {
        "label": "CartSchema",
        "importPath": "app.schemas.cart_schema",
        "description": "app.schemas.cart_schema",
        "isExtraImport": true,
        "detail": "app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "importPath": "app.utils.decorators",
        "description": "app.utils.decorators",
        "isExtraImport": true,
        "detail": "app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "character_schema",
        "importPath": "app.schemas.character_schema",
        "description": "app.schemas.character_schema",
        "isExtraImport": true,
        "detail": "app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "characters_schema",
        "importPath": "app.schemas.character_schema",
        "description": "app.schemas.character_schema",
        "isExtraImport": true,
        "detail": "app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "CharacterSchema",
        "importPath": "app.schemas.character_schema",
        "description": "app.schemas.character_schema",
        "isExtraImport": true,
        "detail": "app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "importPath": "app.models.favorite",
        "description": "app.models.favorite",
        "isExtraImport": true,
        "detail": "app.models.favorite",
        "documentation": {}
    },
    {
        "label": "favorite_schema",
        "importPath": "app.schemas.favorite_schema",
        "description": "app.schemas.favorite_schema",
        "isExtraImport": true,
        "detail": "app.schemas.favorite_schema",
        "documentation": {}
    },
    {
        "label": "favorites_schema",
        "importPath": "app.schemas.favorite_schema",
        "description": "app.schemas.favorite_schema",
        "isExtraImport": true,
        "detail": "app.schemas.favorite_schema",
        "documentation": {}
    },
    {
        "label": "Newsletter",
        "importPath": "app.models.newsletter",
        "description": "app.models.newsletter",
        "isExtraImport": true,
        "detail": "app.models.newsletter",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "backend.app.models.cart_item",
        "description": "backend.app.models.cart_item",
        "peekOfCode": "class CartItem(db.Model):\n    __tablename__ = \"cart_items\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    user_id: Mapped[int] = mapped_column(ForeignKey('users.id'), nullable=False)\n    character_id: Mapped[int] = mapped_column(ForeignKey('characters.id'), nullable=False)\n    quantity: Mapped[int] = mapped_column(Integer, default=1)\n    user = relationship(\"User\")\n    character = relationship(\"Character\")",
        "detail": "backend.app.models.cart_item",
        "documentation": {}
    },
    {
        "label": "Character",
        "kind": 6,
        "importPath": "backend.app.models.character",
        "description": "backend.app.models.character",
        "peekOfCode": "class Character(db.Model):\n    __tablename__ = \"characters\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(String(100), nullable=False)\n    alias: Mapped[str] = mapped_column(String(100), nullable=False)\n    alignment: Mapped[str] = mapped_column(Enum('hero', 'villain', name='alignment_enum'), nullable=False)\n    powers: Mapped[str] = mapped_column(Text, nullable=False)\n    image_url: Mapped[str] = mapped_column(String(255), nullable=False)\n    price: Mapped[float] = mapped_column(Float, nullable=False, default=0.0)",
        "detail": "backend.app.models.character",
        "documentation": {}
    },
    {
        "label": "Favorite",
        "kind": 6,
        "importPath": "backend.app.models.favorite",
        "description": "backend.app.models.favorite",
        "peekOfCode": "class Favorite(db.Model):\n    __tablename__ = 'favorites'\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    user_id: Mapped[int] = mapped_column(Integer, ForeignKey('users.id'), nullable=False)\n    character_id: Mapped[int] = mapped_column(Integer, ForeignKey('characters.id'), nullable=True)\n    filter_json: Mapped[str] = mapped_column(Text, nullable=True)\n    filter_name: Mapped[str] = mapped_column(Text, nullable=True)",
        "detail": "backend.app.models.favorite",
        "documentation": {}
    },
    {
        "label": "Newsletter",
        "kind": 6,
        "importPath": "backend.app.models.newsletter",
        "description": "backend.app.models.newsletter",
        "peekOfCode": "class Newsletter(db.Model):\n    __tablename__ = \"newsletter\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    email: Mapped[str] = mapped_column(String(255), nullable=False)\n    newsletter_value: Mapped[int] = mapped_column(Integer, nullable=False)\n    def __repr__(self):\n        return f\"<Newsletter email={self.email} value={self.newsletter_value}>\"",
        "detail": "backend.app.models.newsletter",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.app.models.user",
        "description": "backend.app.models.user",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = \"users\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)\n    email: Mapped[str] = mapped_column(String(100), nullable=False, unique=True)\n    password: Mapped[str] = mapped_column(String(255), nullable=False)\n    role: Mapped[str] = mapped_column(Enum('admin', 'customer', name='role_enum'), nullable=False)",
        "detail": "backend.app.models.user",
        "documentation": {}
    },
    {
        "label": "token_login",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def token_login():\n    data = request.get_json()\n    username = data.get('username')\n    password = data.get('password')\n    user = User.query.filter_by(username=username).first()\n    if user and user.check_password(password):\n        token = serializer.dumps({\"user_id\": user.id})\n        return jsonify({\"token\": token, \"user\": {\"username\": user.username, \"role\": user.role}}), 200\n    return jsonify({\"message\": \"Invalid credentials\"}), 401\n@auth_bp.route('/verify-token', methods=['POST'])",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "verify_token",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def verify_token():\n    data = request.get_json()\n    token = data.get('token')\n    try:\n        user_data = serializer.loads(token, max_age=3600)  # Token valid for 1 hour\n        user_id = user_data[\"user_id\"]\n        user = User.query.get(user_id)\n        if user:\n            return jsonify({\"user\": {\"username\": user.username, \"role\": user.role}}), 200\n    except SignatureExpired:",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def register():\n    try:\n        data = request.json\n        data['role']='customer'\n        user_data = user_schema.load(data)\n        user = User(\n            username=user_data['username'],\n            email=user_data['email'],\n            password=generate_password_hash(user_data['password']),\n            role='customer'",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def login():\n    data = request.json\n    user = db.session.execute(select(User).where(User.username == data['username'])).scalar_one_or_none()\n    if not user or not check_password_hash(user.password, data['password']):\n        return jsonify({\"message\": \"Invalid credentials\"}), 401\n    session['user_id'] = user.id\n    session.permanent = True\n    return jsonify({\n        \"message\": \"Login successful\",\n        \"user\": {\"username\": user.username, \"email\": user.email, \"role\": user.role}",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "options_favorites",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def options_favorites():\n    return '', 200\n@auth_bp.route('/check-login', methods=['GET'])\ndef check_login():\n    user_id = session.get('user_id')\n    if not user_id:\n        return jsonify({\"loggedIn\": False})\n    user = db.session.get(User, user_id)\n    return jsonify({\"loggedIn\": True, \"user\": user_schema.dump(user)})\n@auth_bp.route('/logout', methods=['POST'])",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "check_login",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def check_login():\n    user_id = session.get('user_id')\n    if not user_id:\n        return jsonify({\"loggedIn\": False})\n    user = db.session.get(User, user_id)\n    return jsonify({\"loggedIn\": True, \"user\": user_schema.dump(user)})\n@auth_bp.route('/logout', methods=['POST'])\ndef logout():\n    session.pop('user_id', None)\n    return jsonify({\"message\": \"Logged out\"})",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "def logout():\n    session.pop('user_id', None)\n    return jsonify({\"message\": \"Logged out\"})",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "google_bp",
        "kind": 5,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "google_bp = make_google_blueprint(\n    scope=[\"profile\", \"email\"],\n    redirect_url=\"/login/google/authorized\"\n)\nauth_bp = Blueprint('auth', __name__)\nuser_schema = UserSchema()\nserializer = URLSafeTimedSerializer(\"super-secret-key\")  # Replace with secure key\n# @auth_bp.route(\"/login/google/authorized\")\n# def google_login():\n#     if not google.authorized:",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "auth_bp",
        "kind": 5,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "auth_bp = Blueprint('auth', __name__)\nuser_schema = UserSchema()\nserializer = URLSafeTimedSerializer(\"super-secret-key\")  # Replace with secure key\n# @auth_bp.route(\"/login/google/authorized\")\n# def google_login():\n#     if not google.authorized:\n#         return redirect(url_for(\"google.login\"))\n#     resp = google.get(\"/oauth2/v2/userinfo\")\n#     if not resp.ok:\n#         return jsonify({\"message\": \"Failed to fetch user info\"}), 403",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "kind": 5,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "user_schema = UserSchema()\nserializer = URLSafeTimedSerializer(\"super-secret-key\")  # Replace with secure key\n# @auth_bp.route(\"/login/google/authorized\")\n# def google_login():\n#     if not google.authorized:\n#         return redirect(url_for(\"google.login\"))\n#     resp = google.get(\"/oauth2/v2/userinfo\")\n#     if not resp.ok:\n#         return jsonify({\"message\": \"Failed to fetch user info\"}), 403\n#     info = resp.json()",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "serializer",
        "kind": 5,
        "importPath": "backend.app.routes.auth_routes",
        "description": "backend.app.routes.auth_routes",
        "peekOfCode": "serializer = URLSafeTimedSerializer(\"super-secret-key\")  # Replace with secure key\n# @auth_bp.route(\"/login/google/authorized\")\n# def google_login():\n#     if not google.authorized:\n#         return redirect(url_for(\"google.login\"))\n#     resp = google.get(\"/oauth2/v2/userinfo\")\n#     if not resp.ok:\n#         return jsonify({\"message\": \"Failed to fetch user info\"}), 403\n#     info = resp.json()\n#     email = info.get(\"email\")",
        "detail": "backend.app.routes.auth_routes",
        "documentation": {}
    },
    {
        "label": "get_cart",
        "kind": 2,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "def get_cart():\n    user_id = session['user_id']\n    items = db.session.query(CartItem).filter_by(user_id=user_id).all()\n    return jsonify(carts_schema.dump(items)), 200\n@cart_bp.route('/cart', methods=['POST'])\n@login_required\ndef add_to_cart():\n    data = request.json\n    user_id = session['user_id']\n    item = db.session.query(CartItem).filter_by(user_id=user_id, character_id=data['character_id']).first()",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "add_to_cart",
        "kind": 2,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "def add_to_cart():\n    data = request.json\n    user_id = session['user_id']\n    item = db.session.query(CartItem).filter_by(user_id=user_id, character_id=data['character_id']).first()\n    if item:\n        item.quantity += data.get('quantity', 1)\n    else:\n        item = CartItem(user_id=user_id, character_id=data['character_id'], quantity=data.get('quantity', 1))\n        db.session.add(item)\n    db.session.commit()",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "update_cart",
        "kind": 2,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "def update_cart(item_id):\n    data = request.json\n    item = db.session.get(CartItem, item_id)\n    if item:\n        item.quantity = data['quantity']\n        db.session.commit()\n        return jsonify({\"message\": \"Updated\"}), 200\n    return jsonify({\"message\": \"Not found\"}), 404\n@cart_bp.route('/cart/<int:item_id>', methods=['DELETE'])\n@login_required",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "delete_cart",
        "kind": 2,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "def delete_cart(item_id):\n    item = db.session.get(CartItem, item_id)\n    if item:\n        db.session.delete(item)\n        db.session.commit()\n        return jsonify({\"message\": \"Deleted\"}), 200\n    return jsonify({\"message\": \"Not found\"}), 404",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "cart_bp",
        "kind": 5,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "cart_bp = Blueprint('cart', __name__)\ncart_schema = CartSchema()\ncarts_schema = CartSchema(many=True)\n@cart_bp.route('/cart', methods=['GET'])\n@login_required\ndef get_cart():\n    user_id = session['user_id']\n    items = db.session.query(CartItem).filter_by(user_id=user_id).all()\n    return jsonify(carts_schema.dump(items)), 200\n@cart_bp.route('/cart', methods=['POST'])",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "cart_schema",
        "kind": 5,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "cart_schema = CartSchema()\ncarts_schema = CartSchema(many=True)\n@cart_bp.route('/cart', methods=['GET'])\n@login_required\ndef get_cart():\n    user_id = session['user_id']\n    items = db.session.query(CartItem).filter_by(user_id=user_id).all()\n    return jsonify(carts_schema.dump(items)), 200\n@cart_bp.route('/cart', methods=['POST'])\n@login_required",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "carts_schema",
        "kind": 5,
        "importPath": "backend.app.routes.cart_routes",
        "description": "backend.app.routes.cart_routes",
        "peekOfCode": "carts_schema = CartSchema(many=True)\n@cart_bp.route('/cart', methods=['GET'])\n@login_required\ndef get_cart():\n    user_id = session['user_id']\n    items = db.session.query(CartItem).filter_by(user_id=user_id).all()\n    return jsonify(carts_schema.dump(items)), 200\n@cart_bp.route('/cart', methods=['POST'])\n@login_required\ndef add_to_cart():",
        "detail": "backend.app.routes.cart_routes",
        "documentation": {}
    },
    {
        "label": "options_favorites",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def options_favorites():\n    return '', 200\n@character_bp.route('', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites2():\n    return '', 200\n@character_bp.route('/by-ids/', methods=['POST'])\ndef get_characters_by_ids():\n    if request.method == 'OPTIONS':\n        return jsonify({\"message\": \"CORS preflight success\"}), 200",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "options_favorites2",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def options_favorites2():\n    return '', 200\n@character_bp.route('/by-ids/', methods=['POST'])\ndef get_characters_by_ids():\n    if request.method == 'OPTIONS':\n        return jsonify({\"message\": \"CORS preflight success\"}), 200\n    data = request.get_json()\n    ids = data.get('ids', [])\n    if not isinstance(ids, list) or not all(isinstance(i, int) for i in ids):\n        return jsonify({\"error\": \"Invalid or missing 'ids' list\"}), 400",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "get_characters_by_ids",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def get_characters_by_ids():\n    if request.method == 'OPTIONS':\n        return jsonify({\"message\": \"CORS preflight success\"}), 200\n    data = request.get_json()\n    ids = data.get('ids', [])\n    if not isinstance(ids, list) or not all(isinstance(i, int) for i in ids):\n        return jsonify({\"error\": \"Invalid or missing 'ids' list\"}), 400\n    characters = Character.query.filter(Character.id.in_(ids)).all()\n    return jsonify(characters_schema.dump(characters)), 200\n@character_bp.route(\"\", methods=[\"GET\"])",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "get_characters",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def get_characters():\n    sort_by = request.args.get(\"sortBy\", \"name\")\n    search = request.args.get(\"search\", \"\")\n    page = int(request.args.get(\"page\", 1))\n    per_page = int(request.args.get(\"perPage\", 12))\n    alignment = request.args.get(\"alignment\", \"\")\n    query = select(Character)\n    if search:\n        like_term = f\"%{search}%\"\n        query = query.where(",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "get_character",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def get_character(id):\n    character = db.session.get(Character, id)\n    if not character:\n        return jsonify({\"message\": \"Character not found\"}), 404\n    return jsonify(character_schema.dump(character)), 200\n@character_bp.route(\"\", methods=[\"POST\"])\n@admin_required\ndef create_character():\n    data = request.get_json()\n    try:",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "create_character",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def create_character():\n    data = request.get_json()\n    try:\n        new_character = character_schema.load(data)\n        character = Character(**new_character)\n        db.session.add(character)\n        db.session.commit()\n        return jsonify(character_schema.dump(character)), 201\n    except Exception as e:\n        return jsonify({\"message\": \"Error creating character\", \"error\": str(e)}), 400",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "update_character",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def update_character(id):\n    character = db.session.get(Character, id)\n    if not character:\n        return jsonify({\"message\": \"Character not found\"}), 404\n    data = request.get_json()\n    try:\n        updates = character_schema.load(data)\n        for key, value in updates.items():\n            setattr(character, key, value)\n        db.session.commit()",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "delete_character",
        "kind": 2,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "def delete_character(id):\n    character = db.session.get(Character, id)\n    if not character:\n        return jsonify({\"message\": \"Character not found\"}), 404\n    db.session.delete(character)\n    db.session.commit()\n    return jsonify({\"message\": \"Character deleted\"}), 200",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "character_bp",
        "kind": 5,
        "importPath": "backend.app.routes.character_routes",
        "description": "backend.app.routes.character_routes",
        "peekOfCode": "character_bp = Blueprint(\"characters\", __name__, url_prefix=\"/characters\")\n@character_bp.route('/by-ids/', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites():\n    return '', 200\n@character_bp.route('', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites2():\n    return '', 200\n@character_bp.route('/by-ids/', methods=['POST'])",
        "detail": "backend.app.routes.character_routes",
        "documentation": {}
    },
    {
        "label": "update_content",
        "kind": 2,
        "importPath": "backend.app.routes.content_routes",
        "description": "backend.app.routes.content_routes",
        "peekOfCode": "def update_content():\n    data = request.get_json()\n    if not data or \"field\" not in data or \"value\" not in data:\n        return jsonify({\"error\": \"Missing 'field' or 'value'\"}), 400\n    content_path = os.path.join(current_app.root_path, '../../react-router-bootstrap-app/public/', 'content.json')\n    # Ensure file exists\n    if not os.path.exists(content_path):\n        with open(content_path, 'w') as f:\n            json.dump({}, f)\n    # Load existing data",
        "detail": "backend.app.routes.content_routes",
        "documentation": {}
    },
    {
        "label": "upload_image",
        "kind": 2,
        "importPath": "backend.app.routes.content_routes",
        "description": "backend.app.routes.content_routes",
        "peekOfCode": "def upload_image():\n    if 'image' not in request.files:\n        return jsonify({\"error\": \"No file provided\"}), 400\n    file = request.files['image']\n    if file.filename == '':\n        return jsonify({\"error\": \"Empty filename\"}), 400\n    from flask import current_app\n    upload_folder = os.path.join(current_app.root_path, '../../react-router-bootstrap-app/public/', 'images')\n    os.makedirs(upload_folder, exist_ok=True)\n    filename = secure_filename(file.filename)",
        "detail": "backend.app.routes.content_routes",
        "documentation": {}
    },
    {
        "label": "content_preview",
        "kind": 2,
        "importPath": "backend.app.routes.content_routes",
        "description": "backend.app.routes.content_routes",
        "peekOfCode": "def content_preview():\n    content_path = os.path.join(current_app.root_path, '../../react-router-bootstrap-app/public', 'content.json')\n    if not os.path.exists(content_path):\n        return jsonify({})\n    with open(content_path, 'r', encoding='utf-8') as f:\n        content = json.load(f)\n    return jsonify(content)",
        "detail": "backend.app.routes.content_routes",
        "documentation": {}
    },
    {
        "label": "content_bp",
        "kind": 5,
        "importPath": "backend.app.routes.content_routes",
        "description": "backend.app.routes.content_routes",
        "peekOfCode": "content_bp = Blueprint('content', __name__)\nfrom app.utils.decorators import admin_required\n@content_bp.route('/api/update-content', methods=['POST'])\n@admin_required\ndef update_content():\n    data = request.get_json()\n    if not data or \"field\" not in data or \"value\" not in data:\n        return jsonify({\"error\": \"Missing 'field' or 'value'\"}), 400\n    content_path = os.path.join(current_app.root_path, '../../react-router-bootstrap-app/public/', 'content.json')\n    # Ensure file exists",
        "detail": "backend.app.routes.content_routes",
        "documentation": {}
    },
    {
        "label": "options_favorites",
        "kind": 2,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "def options_favorites():\n    return '', 200\n@favorite_bp.route('/character/<int:character_id>', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites2():\n    return '', 200\n@favorite_bp.route('/', methods=['GET'])\n@login_required\ndef get_favorites():\n    if request.method == 'OPTIONS':",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "options_favorites2",
        "kind": 2,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "def options_favorites2():\n    return '', 200\n@favorite_bp.route('/', methods=['GET'])\n@login_required\ndef get_favorites():\n    if request.method == 'OPTIONS':\n        return '', 200\n    user_favorites = Favorite.query.filter_by(user_id=session.get('user_id')).all()\n    return jsonify(favorites_schema.dump(user_favorites)), 200\n@favorite_bp.route('/', methods=['POST'])",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "get_favorites",
        "kind": 2,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "def get_favorites():\n    if request.method == 'OPTIONS':\n        return '', 200\n    user_favorites = Favorite.query.filter_by(user_id=session.get('user_id')).all()\n    return jsonify(favorites_schema.dump(user_favorites)), 200\n@favorite_bp.route('/', methods=['POST'])\n@login_required\ndef add_favorite():\n    if request.method == 'OPTIONS':\n        return '', 200",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "add_favorite",
        "kind": 2,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "def add_favorite():\n    if request.method == 'OPTIONS':\n        return '', 200\n    data = request.json\n    character_id = data.get('character_id')\n    filter_json = data.get('filter_json')\n    if not character_id and not filter_json:\n        return jsonify({\"error\": \"Either character_id or filter_json is required.\"}), 400\n    favorite = Favorite(user_id=session.get('user_id'), character_id=character_id, filter_json=filter_json)\n    db.session.add(favorite)",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "delete_favorite_by_character",
        "kind": 2,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "def delete_favorite_by_character(character_id):\n    favorite = Favorite.query.filter_by(\n        user_id=session.get('user_id'),\n        character_id=character_id\n    ).first()\n    if not favorite:\n        return jsonify({\"error\": \"Favorite not found\"}), 404\n    db.session.delete(favorite)\n    db.session.commit()\n    return jsonify({\"message\": \"Favorite deleted\"}), 200",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "favorite_bp",
        "kind": 5,
        "importPath": "backend.app.routes.favorite_routes",
        "description": "backend.app.routes.favorite_routes",
        "peekOfCode": "favorite_bp = Blueprint('favorite_bp', __name__, url_prefix='/api/favorites')\n@favorite_bp.route('/', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites():\n    return '', 200\n@favorite_bp.route('/character/<int:character_id>', methods=['OPTIONS'])\n@cross_origin(supports_credentials=True)\ndef options_favorites2():\n    return '', 200\n@favorite_bp.route('/', methods=['GET'])",
        "detail": "backend.app.routes.favorite_routes",
        "documentation": {}
    },
    {
        "label": "subscribe",
        "kind": 2,
        "importPath": "backend.app.routes.newsletter_routes",
        "description": "backend.app.routes.newsletter_routes",
        "peekOfCode": "def subscribe():\n    if request.method == 'OPTIONS':\n        return '', 200  # Respond to preflight properly\n    data = request.get_json()\n    email = data.get('email')\n    value = data.get('newsletter_value')\n    if not email or not value:\n        return jsonify({'error': 'Email and newsletter_value are required.'}), 400\n    if Newsletter.query.filter_by(email=email).first():\n        return jsonify({'error': 'Email already subscribed.'}), 400",
        "detail": "backend.app.routes.newsletter_routes",
        "documentation": {}
    },
    {
        "label": "unsubscribe",
        "kind": 2,
        "importPath": "backend.app.routes.newsletter_routes",
        "description": "backend.app.routes.newsletter_routes",
        "peekOfCode": "def unsubscribe():\n    data = request.get_json()\n    email = data.get('email')\n    entry = Newsletter.query.filter_by(email=email).first()\n    if not entry:\n        return jsonify({'error': 'Email not found.'}), 404\n    db.session.delete(entry)\n    db.session.commit()\n    return jsonify({'message': 'Unsubscribed successfully'}), 200\n@newsletter_bp.route('/list', methods=['GET'])",
        "detail": "backend.app.routes.newsletter_routes",
        "documentation": {}
    },
    {
        "label": "list_by_value",
        "kind": 2,
        "importPath": "backend.app.routes.newsletter_routes",
        "description": "backend.app.routes.newsletter_routes",
        "peekOfCode": "def list_by_value():\n    value = request.args.get('value')\n    if not value:\n        return jsonify({'error': 'Missing newsletter_value parameter.'}), 400\n    emails = Newsletter.query.filter_by(newsletter_value=value).all()\n    return jsonify([entry.email for entry in emails]), 200",
        "detail": "backend.app.routes.newsletter_routes",
        "documentation": {}
    },
    {
        "label": "newsletter_bp",
        "kind": 5,
        "importPath": "backend.app.routes.newsletter_routes",
        "description": "backend.app.routes.newsletter_routes",
        "peekOfCode": "newsletter_bp = Blueprint('newsletter', __name__, url_prefix='/api/newsletter')\n@newsletter_bp.route('/subscribe', methods=['POST', 'OPTIONS'])\ndef subscribe():\n    if request.method == 'OPTIONS':\n        return '', 200  # Respond to preflight properly\n    data = request.get_json()\n    email = data.get('email')\n    value = data.get('newsletter_value')\n    if not email or not value:\n        return jsonify({'error': 'Email and newsletter_value are required.'}), 400",
        "detail": "backend.app.routes.newsletter_routes",
        "documentation": {}
    },
    {
        "label": "change_email",
        "kind": 2,
        "importPath": "backend.app.routes.user_settings_routes",
        "description": "backend.app.routes.user_settings_routes",
        "peekOfCode": "def change_email():\n    data = request.json\n    new_email = data.get('email')\n    password = data.get('password')\n    if not check_password_hash(mock_user['password_hash'], password):\n        return jsonify({\"message\": \"Incorrect password\"}), 401\n    mock_user['email'] = new_email\n    return jsonify({\"message\": \"Email updated successfully\"}), 200\n@user_settings_bp.route('/mock-change-password', methods=['POST'])\ndef change_password():",
        "detail": "backend.app.routes.user_settings_routes",
        "documentation": {}
    },
    {
        "label": "change_password",
        "kind": 2,
        "importPath": "backend.app.routes.user_settings_routes",
        "description": "backend.app.routes.user_settings_routes",
        "peekOfCode": "def change_password():\n    data = request.json\n    current_password = data.get('currentPassword')\n    new_password = data.get('newPassword')\n    if not check_password_hash(mock_user['password_hash'], current_password):\n        return jsonify({\"message\": \"Incorrect current password\"}), 401\n    mock_user['password_hash'] = generate_password_hash(new_password)\n    return jsonify({\"message\": \"Password updated successfully\"}), 200",
        "detail": "backend.app.routes.user_settings_routes",
        "documentation": {}
    },
    {
        "label": "user_settings_bp",
        "kind": 5,
        "importPath": "backend.app.routes.user_settings_routes",
        "description": "backend.app.routes.user_settings_routes",
        "peekOfCode": "user_settings_bp = Blueprint('user_settings', __name__)\n# Mock user data (in real applications, use your database instead)\nmock_user = {\n    \"email\": \"admin@example.com\",\n    \"password_hash\": generate_password_hash(\"admin123\")  # hashed \"admin123\"\n}\n@user_settings_bp.route('/mock-change-email', methods=['POST'])\ndef change_email():\n    data = request.json\n    new_email = data.get('email')",
        "detail": "backend.app.routes.user_settings_routes",
        "documentation": {}
    },
    {
        "label": "mock_user",
        "kind": 5,
        "importPath": "backend.app.routes.user_settings_routes",
        "description": "backend.app.routes.user_settings_routes",
        "peekOfCode": "mock_user = {\n    \"email\": \"admin@example.com\",\n    \"password_hash\": generate_password_hash(\"admin123\")  # hashed \"admin123\"\n}\n@user_settings_bp.route('/mock-change-email', methods=['POST'])\ndef change_email():\n    data = request.json\n    new_email = data.get('email')\n    password = data.get('password')\n    if not check_password_hash(mock_user['password_hash'], password):",
        "detail": "backend.app.routes.user_settings_routes",
        "documentation": {}
    },
    {
        "label": "CartSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.cart_schema",
        "description": "backend.app.schemas.cart_schema",
        "peekOfCode": "class CartSchema(Schema):\n    id = fields.Int(dump_only=True)\n    user_id = fields.Int(required=True)\n    character_id = fields.Int(required=True)\n    quantity = fields.Int(required=True)\n    character = fields.Nested(CharacterSchema, dump_only=True)\ncart_schema = CartSchema()\ncarts_schema = CartSchema(many=True)",
        "detail": "backend.app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "cart_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.cart_schema",
        "description": "backend.app.schemas.cart_schema",
        "peekOfCode": "cart_schema = CartSchema()\ncarts_schema = CartSchema(many=True)",
        "detail": "backend.app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "carts_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.cart_schema",
        "description": "backend.app.schemas.cart_schema",
        "peekOfCode": "carts_schema = CartSchema(many=True)",
        "detail": "backend.app.schemas.cart_schema",
        "documentation": {}
    },
    {
        "label": "CharacterSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.character_schema",
        "description": "backend.app.schemas.character_schema",
        "peekOfCode": "class CharacterSchema(Schema):\n    id = fields.Int()\n    name = fields.Str(required=True)\n    alias = fields.Str(required=True)\n    alignment = fields.Str(required=True)\n    powers = fields.Str(required=True)\n    image_url = fields.Str(required=True)\n    price = fields.Float(required=True)\ncharacter_schema = CharacterSchema()\ncharacters_schema = CharacterSchema(many=True)",
        "detail": "backend.app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "character_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.character_schema",
        "description": "backend.app.schemas.character_schema",
        "peekOfCode": "character_schema = CharacterSchema()\ncharacters_schema = CharacterSchema(many=True)",
        "detail": "backend.app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "characters_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.character_schema",
        "description": "backend.app.schemas.character_schema",
        "peekOfCode": "characters_schema = CharacterSchema(many=True)",
        "detail": "backend.app.schemas.character_schema",
        "documentation": {}
    },
    {
        "label": "FavoriteSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.favorite_schema",
        "description": "backend.app.schemas.favorite_schema",
        "peekOfCode": "class FavoriteSchema(Schema):\n    id = fields.Int(dump_only=True)\n    user_id = fields.Int(required=True)\n    character_id = fields.Int(allow_none=True)\n    filter_json = fields.Str(allow_none=True)\n    filter_name = fields.Str(allow_none=True)\nfavorite_schema = FavoriteSchema()\nfavorites_schema = FavoriteSchema(many=True)",
        "detail": "backend.app.schemas.favorite_schema",
        "documentation": {}
    },
    {
        "label": "favorite_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.favorite_schema",
        "description": "backend.app.schemas.favorite_schema",
        "peekOfCode": "favorite_schema = FavoriteSchema()\nfavorites_schema = FavoriteSchema(many=True)",
        "detail": "backend.app.schemas.favorite_schema",
        "documentation": {}
    },
    {
        "label": "favorites_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.favorite_schema",
        "description": "backend.app.schemas.favorite_schema",
        "peekOfCode": "favorites_schema = FavoriteSchema(many=True)",
        "detail": "backend.app.schemas.favorite_schema",
        "documentation": {}
    },
    {
        "label": "NewsletterSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.newsletter_schema",
        "description": "backend.app.schemas.newsletter_schema",
        "peekOfCode": "class NewsletterSchema(Schema):\n    id = fields.Int(dump_only=True)\n    email = fields.Email(required=True)\n    newsletter_value = fields.Str(required=True)\n# Single + multiple object serializers\nnewsletter_schema = NewsletterSchema()\nnewsletters_schema = NewsletterSchema(many=True)",
        "detail": "backend.app.schemas.newsletter_schema",
        "documentation": {}
    },
    {
        "label": "newsletter_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.newsletter_schema",
        "description": "backend.app.schemas.newsletter_schema",
        "peekOfCode": "newsletter_schema = NewsletterSchema()\nnewsletters_schema = NewsletterSchema(many=True)",
        "detail": "backend.app.schemas.newsletter_schema",
        "documentation": {}
    },
    {
        "label": "newsletters_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.newsletter_schema",
        "description": "backend.app.schemas.newsletter_schema",
        "peekOfCode": "newsletters_schema = NewsletterSchema(many=True)",
        "detail": "backend.app.schemas.newsletter_schema",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "backend.app.schemas.user_schema",
        "description": "backend.app.schemas.user_schema",
        "peekOfCode": "class UserSchema(Schema):\n    id = fields.Int(dump_only=True)\n    username = fields.Str(required=True)\n    email = fields.Email(required=True)\n    password = fields.Str(load_only=True, required=True)\n    role = fields.Str(required=True)\nuser_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "backend.app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "user_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.user_schema",
        "description": "backend.app.schemas.user_schema",
        "peekOfCode": "user_schema = UserSchema()\nusers_schema = UserSchema(many=True)",
        "detail": "backend.app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "users_schema",
        "kind": 5,
        "importPath": "backend.app.schemas.user_schema",
        "description": "backend.app.schemas.user_schema",
        "peekOfCode": "users_schema = UserSchema(many=True)",
        "detail": "backend.app.schemas.user_schema",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 2,
        "importPath": "backend.app.tests.conftest",
        "description": "backend.app.tests.conftest",
        "peekOfCode": "def app():\n    app = create_app()\n    app.config.update({\n        \"TESTING\": True,\n        \"SQLALCHEMY_DATABASE_URI\": \"sqlite:///:memory:\",\n    })\n    with app.app_context():\n        db.create_all()\n        yield app\n        db.session.remove()",
        "detail": "backend.app.tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "backend.app.tests.conftest",
        "description": "backend.app.tests.conftest",
        "peekOfCode": "def client(app):\n    return app.test_client()",
        "detail": "backend.app.tests.conftest",
        "documentation": {}
    },
    {
        "label": "test_register",
        "kind": 2,
        "importPath": "backend.app.tests.test_auth",
        "description": "backend.app.tests.test_auth",
        "peekOfCode": "def test_register(client):\n    response = client.post('/register', json={\n        \"username\": \"testuser\",\n        \"email\": \"test@example.com\",\n        \"password\": \"password123\"\n    })\n    assert response.status_code == 201\n    assert \"message\" in response.json\ndef test_login(client):\n    response = client.post('/login', json={",
        "detail": "backend.app.tests.test_auth",
        "documentation": {}
    },
    {
        "label": "test_login",
        "kind": 2,
        "importPath": "backend.app.tests.test_auth",
        "description": "backend.app.tests.test_auth",
        "peekOfCode": "def test_login(client):\n    response = client.post('/login', json={\n        \"username\": \"testuser\",\n        \"password\": \"password123\"\n    })\n    assert response.status_code == 200\n    assert \"user\" in response.json",
        "detail": "backend.app.tests.test_auth",
        "documentation": {}
    },
    {
        "label": "test_create_character",
        "kind": 2,
        "importPath": "backend.app.tests.test_characters",
        "description": "backend.app.tests.test_characters",
        "peekOfCode": "def test_create_character(client, admin_auth_header):\n    character_data = {\n        \"name\": \"Test Hero\",\n        \"alias\": \"Hero Alias\",\n        \"alignment\": \"hero\",\n        \"powers\": \"Flying\",\n        \"image_url\": \"http://example.com/image.png\",\n        \"price\": 5.0\n    }\n    response = client.post(\"/characters\", json=character_data, headers=admin_auth_header)",
        "detail": "backend.app.tests.test_characters",
        "documentation": {}
    },
    {
        "label": "test_get_characters",
        "kind": 2,
        "importPath": "backend.app.tests.test_characters",
        "description": "backend.app.tests.test_characters",
        "peekOfCode": "def test_get_characters(client):\n    response = client.get(\"/characters\")\n    assert response.status_code == 200",
        "detail": "backend.app.tests.test_characters",
        "documentation": {}
    },
    {
        "label": "test_add_favorite",
        "kind": 2,
        "importPath": "backend.app.tests.test_favorites",
        "description": "backend.app.tests.test_favorites",
        "peekOfCode": "def test_add_favorite(client, user_auth_header):\n    res = client.post('/api/favorites/', json={\"character_id\": 1}, headers=user_auth_header)\n    assert res.status_code == 201\ndef test_get_favorites(client, user_auth_header):\n    res = client.get('/api/favorites/', headers=user_auth_header)\n    assert res.status_code == 200",
        "detail": "backend.app.tests.test_favorites",
        "documentation": {}
    },
    {
        "label": "test_get_favorites",
        "kind": 2,
        "importPath": "backend.app.tests.test_favorites",
        "description": "backend.app.tests.test_favorites",
        "peekOfCode": "def test_get_favorites(client, user_auth_header):\n    res = client.get('/api/favorites/', headers=user_auth_header)\n    assert res.status_code == 200",
        "detail": "backend.app.tests.test_favorites",
        "documentation": {}
    },
    {
        "label": "test_add_newsletter_email",
        "kind": 2,
        "importPath": "backend.app.tests.test_newsletter",
        "description": "backend.app.tests.test_newsletter",
        "peekOfCode": "def test_add_newsletter_email(client):\n    res = client.post('/api/newsletter', json={\"email\": \"test@newsletter.com\", \"newsletter_value\": \"monthly\"})\n    assert res.status_code == 201\ndef test_get_newsletter_emails(client):\n    client.post('/api/newsletter', json={\"email\": \"fetch@newsletter.com\", \"newsletter_value\": \"weekly\"})\n    res = client.get('/api/newsletter?newsletter_value=weekly')\n    assert res.status_code == 200",
        "detail": "backend.app.tests.test_newsletter",
        "documentation": {}
    },
    {
        "label": "test_get_newsletter_emails",
        "kind": 2,
        "importPath": "backend.app.tests.test_newsletter",
        "description": "backend.app.tests.test_newsletter",
        "peekOfCode": "def test_get_newsletter_emails(client):\n    client.post('/api/newsletter', json={\"email\": \"fetch@newsletter.com\", \"newsletter_value\": \"weekly\"})\n    res = client.get('/api/newsletter?newsletter_value=weekly')\n    assert res.status_code == 200",
        "detail": "backend.app.tests.test_newsletter",
        "documentation": {}
    },
    {
        "label": "login_required",
        "kind": 2,
        "importPath": "backend.app.utils.decorators",
        "description": "backend.app.utils.decorators",
        "peekOfCode": "def login_required(f):\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        if not session.get('user_id'):\n            return jsonify({\"error\": \"Unauthorized\"}), 401\n        return f(*args, **kwargs)\n    return wrapper\ndef admin_required(f):\n    @wraps(f)\n    def wrapper(*args, **kwargs):",
        "detail": "backend.app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "backend.app.utils.decorators",
        "description": "backend.app.utils.decorators",
        "peekOfCode": "def admin_required(f):\n    @wraps(f)\n    def wrapper(*args, **kwargs):\n        user_id = session.get(\"user_id\")\n        if not user_id:\n            return jsonify({\"error\": \"Unauthorized\"}), 401\n        user = db.session.get(User, user_id)\n        if not user or user.role.lower() != \"admin\":\n            return jsonify({\"error\": \"Admin access required\"}), 403\n        g.current_user = user  # Optionally set for use in route",
        "detail": "backend.app.utils.decorators",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "backend.app.config",
        "description": "backend.app.config",
        "peekOfCode": "class Config:\n    SECRET_KEY = os.getenv('FLASK_SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')\n    ROOT_DATABASE_URL = os.getenv('ROOT_DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    CORS_ORIGIN = os.getenv('CORS_ORIGIN')\n    GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')\n    GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')\n    OAUTHLIB_INSECURE_TRANSPORT = True  # Only for local dev",
        "detail": "backend.app.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.server",
        "description": "backend.server",
        "peekOfCode": "app = create_app()\nif __name__ == '__main__':\n    app.run(debug=True, host='0.0.0.0')",
        "detail": "backend.server",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "description": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "description": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "description": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "description": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "react-router-bootstrap-app.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]