============================= test session starts =============================
platform win32 -- Python 3.10.11, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\njcro\m7project\backend
configfile: pytest.ini
plugins: Flask-Dance-7.1.0, flask-1.3.0
collected 32 items

tests\test_auth.py EEE                                                   [  9%]
tests\test_auth_routes.py E                                              [ 12%]
tests\test_cart.py E                                                     [ 15%]
tests\test_cart_routes.py EEEE                                           [ 28%]
tests\test_content.py E                                                  [ 31%]
tests\test_content_routes.py E                                           [ 34%]
tests\test_favorite.py E                                                 [ 37%]
tests\test_favorite_routes.py E                                          [ 40%]
tests\test_favorites.py E                                                [ 43%]
tests\test_health_routes.py E                                            [ 46%]
tests\test_kit_routes.py E                                               [ 50%]
tests\test_kits.py EE                                                    [ 56%]
tests\test_newsletter.py EE                                              [ 62%]
tests\test_newsletter_routes.py EE                                       [ 68%]
tests\test_purchase_routes.py E                                          [ 71%]
tests\test_purchases.py EE                                               [ 78%]
tests\test_review_routes.py E                                            [ 81%]
tests\test_reviews.py EE                                                 [ 87%]
tests\test_user_settings.py EEE                                          [ 96%]
tests\test_user_settings_routes.py E                                     [100%]

=================================== ERRORS ====================================
_______________________ ERROR at setup of test_register _______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: ['http://localhost:3000', 'http://localhost:3000']
________________________ ERROR at setup of test_login _________________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
______________________ ERROR at setup of test_auth_basic ______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
__________________ ERROR at setup of test_auth_routes_basic ___________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
______________________ ERROR at setup of test_cart_basic ______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_get_empty_cart ____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_____________________ ERROR at setup of test_add_to_cart ______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_________________ ERROR at setup of test_update_cart_quantity _________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
___________________ ERROR at setup of test_delete_cart_item ___________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_content_basic _____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_________________ ERROR at setup of test_content_routes_basic _________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_favorite_basic ____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
________________ ERROR at setup of test_favorite_routes_basic _________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_get_favorites _____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_________________ ERROR at setup of test_health_routes_basic __________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
___________________ ERROR at setup of test_kit_routes_basic ___________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
___________________ ERROR at setup of test_create_character ___________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_get_characters ____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
________________ ERROR at setup of test_get_newsletter_emails _________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
___________________ ERROR at setup of test_newsletter_basic ___________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
________________ ERROR at setup of test_unsubscribe_newsletter ________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_______________ ERROR at setup of test_newsletter_routes_basic ________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
________________ ERROR at setup of test_purchase_routes_basic _________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
____________________ ERROR at setup of test_list_purchases ____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_______________________ ERROR at setup of test_checkout _______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_________________ ERROR at setup of test_review_routes_basic __________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_____________________ ERROR at setup of test_get_reviews ______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_____________________ ERROR at setup of test_post_review ______________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_________________ ERROR at setup of test_user_settings_basic __________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
_____________________ ERROR at setup of test_update_email _____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
___________________ ERROR at setup of test_update_password ____________________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
______________ ERROR at setup of test_user_settings_routes_basic ______________

    @pytest.fixture(scope="session")
    def app():
>       app = create_app()

tests\conftest.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app\__init__.py:90: in create_app
    app.register_blueprint(inventory_bp)
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
venv\lib\site-packages\flask\sansio\app.py:595: in register_blueprint
    blueprint.register(self, options)
venv\lib\site-packages\flask\sansio\blueprints.py:335: in register
    deferred(state)
venv\lib\site-packages\flask\sansio\blueprints.py:434: in <lambda>
    lambda s: s.add_url_rule(
venv\lib\site-packages\flask\sansio\blueprints.py:110: in add_url_rule
    self.app.add_url_rule(
venv\lib\site-packages\flask\sansio\scaffold.py:47: in wrapper_func
    return f(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Flask 'app'>, rule = '/api/inventory'
endpoint = 'inventory.get_inventory_by_kit'
view_func = <function get_inventory_by_kit at 0x000001A3EBDABD90>
provide_automatic_options = True
options = {'defaults': {}, 'endpoint': 'inventory.get_inventory_by_kit', 'subdomain': None}
methods = {'GET', 'OPTIONS'}, required_methods = {'OPTIONS'}
rule_obj = <Rule '/api/inventory' (OPTIONS, HEAD, GET) -> inventory.get_inventory_by_kit>
old_func = <function get_inventory_by_kit at 0x000001A3EBDABC70>

    @setupmethod
    def add_url_rule(
        self,
        rule: str,
        endpoint: str | None = None,
        view_func: ft.RouteCallable | None = None,
        provide_automatic_options: bool | None = None,
        **options: t.Any,
    ) -> None:
        if endpoint is None:
            endpoint = _endpoint_from_view_func(view_func)  # type: ignore
        options["endpoint"] = endpoint
        methods = options.pop("methods", None)
    
        # if the methods are not given and the view_func object knows its
        # methods we can use that instead.  If neither exists, we go with
        # a tuple of only ``GET`` as default.
        if methods is None:
            methods = getattr(view_func, "methods", None) or ("GET",)
        if isinstance(methods, str):
            raise TypeError(
                "Allowed methods must be a list of strings, for"
                ' example: @app.route(..., methods=["POST"])'
            )
        methods = {item.upper() for item in methods}
    
        # Methods that should always be added
        required_methods: set[str] = set(getattr(view_func, "required_methods", ()))
    
        # starting with Flask 0.8 the view_func object can disable and
        # force-enable the automatic options handling.
        if provide_automatic_options is None:
            provide_automatic_options = getattr(
                view_func, "provide_automatic_options", None
            )
    
        if provide_automatic_options is None:
            if "OPTIONS" not in methods and self.config["PROVIDE_AUTOMATIC_OPTIONS"]:
                provide_automatic_options = True
                required_methods.add("OPTIONS")
            else:
                provide_automatic_options = False
    
        # Add the required methods now.
        methods |= required_methods
    
        rule_obj = self.url_rule_class(rule, methods=methods, **options)
        rule_obj.provide_automatic_options = provide_automatic_options  # type: ignore[attr-defined]
    
        self.url_map.add(rule_obj)
        if view_func is not None:
            old_func = self.view_functions.get(endpoint)
            if old_func is not None and old_func != view_func:
>               raise AssertionError(
                    "View function mapping is overwriting an existing"
                    f" endpoint function: {endpoint}"
                )
E               AssertionError: View function mapping is overwriting an existing endpoint function: inventory.get_inventory_by_kit

venv\lib\site-packages\flask\sansio\app.py:657: AssertionError
=========================== short test summary info ===========================
ERROR tests/test_auth.py::test_register - AssertionError: View function mappi...
ERROR tests/test_auth.py::test_login - AssertionError: View function mapping ...
ERROR tests/test_auth.py::test_auth_basic - AssertionError: View function map...
ERROR tests/test_auth_routes.py::test_auth_routes_basic - AssertionError: Vie...
ERROR tests/test_cart.py::test_cart_basic - AssertionError: View function map...
ERROR tests/test_cart_routes.py::test_get_empty_cart - AssertionError: View f...
ERROR tests/test_cart_routes.py::test_add_to_cart - AssertionError: View func...
ERROR tests/test_cart_routes.py::test_update_cart_quantity - AssertionError: ...
ERROR tests/test_cart_routes.py::test_delete_cart_item - AssertionError: View...
ERROR tests/test_content.py::test_content_basic - AssertionError: View functi...
ERROR tests/test_content_routes.py::test_content_routes_basic - AssertionErro...
ERROR tests/test_favorite.py::test_favorite_basic - AssertionError: View func...
ERROR tests/test_favorite_routes.py::test_favorite_routes_basic - AssertionEr...
ERROR tests/test_favorites.py::test_get_favorites - AssertionError: View func...
ERROR tests/test_health_routes.py::test_health_routes_basic - AssertionError:...
ERROR tests/test_kit_routes.py::test_kit_routes_basic - AssertionError: View ...
ERROR tests/test_kits.py::test_create_character - AssertionError: View functi...
ERROR tests/test_kits.py::test_get_characters - AssertionError: View function...
ERROR tests/test_newsletter.py::test_get_newsletter_emails - AssertionError: ...
ERROR tests/test_newsletter.py::test_newsletter_basic - AssertionError: View ...
ERROR tests/test_newsletter_routes.py::test_unsubscribe_newsletter - Assertio...
ERROR tests/test_newsletter_routes.py::test_newsletter_routes_basic - Asserti...
ERROR tests/test_purchase_routes.py::test_purchase_routes_basic - AssertionEr...
ERROR tests/test_purchases.py::test_list_purchases - AssertionError: View fun...
ERROR tests/test_purchases.py::test_checkout - AssertionError: View function ...
ERROR tests/test_review_routes.py::test_review_routes_basic - AssertionError:...
ERROR tests/test_reviews.py::test_get_reviews - AssertionError: View function...
ERROR tests/test_reviews.py::test_post_review - AssertionError: View function...
ERROR tests/test_user_settings.py::test_user_settings_basic - AssertionError:...
ERROR tests/test_user_settings.py::test_update_email - AssertionError: View f...
ERROR tests/test_user_settings.py::test_update_password - AssertionError: Vie...
ERROR tests/test_user_settings_routes.py::test_user_settings_routes_basic - A...
============================= 32 errors in 1.89s ==============================
