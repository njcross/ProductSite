============================= test session starts =============================
platform win32 -- Python 3.10.11, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\njcro\m7project\backend
configfile: pytest.ini
plugins: Flask-Dance-7.1.0, flask-1.3.0
collected 32 items

tests\test_auth.py FE.                                                   [  9%]
tests\test_auth_routes.py .                                              [ 12%]
tests\test_cart.py .                                                     [ 15%]
tests\test_cart_routes.py EEEE                                           [ 28%]
tests\test_content.py .                                                  [ 31%]
tests\test_content_routes.py .                                           [ 34%]
tests\test_favorite.py .                                                 [ 37%]
tests\test_favorite_routes.py .                                          [ 40%]
tests\test_favorites.py E                                                [ 43%]
tests\test_health_routes.py .                                            [ 46%]
tests\test_kit_routes.py .                                               [ 50%]
tests\test_kits.py EF                                                    [ 56%]
tests\test_newsletter.py E.                                              [ 62%]
tests\test_newsletter_routes.py F.                                       [ 68%]
tests\test_purchase_routes.py .                                          [ 71%]
tests\test_purchases.py EE                                               [ 78%]
tests\test_review_routes.py .                                            [ 81%]
tests\test_reviews.py EE                                                 [ 87%]
tests\test_user_settings.py .EE                                          [ 96%]
tests\test_user_settings_routes.py .                                     [100%]

=================================== ERRORS ====================================
________________________ ERROR at setup of test_login _________________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: http://localhost:3000
Database tables created!
____________________ ERROR at setup of test_get_empty_cart ____________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_____________________ ERROR at setup of test_add_to_cart ______________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_________________ ERROR at setup of test_update_cart_quantity _________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
___________________ ERROR at setup of test_delete_cart_item ___________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
____________________ ERROR at setup of test_get_favorites _____________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
___________________ ERROR at setup of test_create_character ___________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
________________ ERROR at setup of test_get_newsletter_emails _________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
____________________ ERROR at setup of test_list_purchases ____________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_______________________ ERROR at setup of test_checkout _______________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_____________________ ERROR at setup of test_get_reviews ______________________

app = <Flask 'app'>

    @pytest.fixture
    def create_test_kit_and_inventory(app):
        with app.app_context():
            data = {
                "name": "Test Kit",
                "description": "This is a test kit.",
                "price": 19.99,
                "image_url": "http://example.com/testkit.jpg"
            }
            kit_data = kit_schema.load(data)
>           new_kit = Kit(**kit_data)

tests\conftest.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_____________________ ERROR at setup of test_post_review ______________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_____________________ ERROR at setup of test_update_email _____________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: http://localhost:3000
Database tables created!
___________________ ERROR at setup of test_update_password ____________________

app = <Flask 'app'>

    @pytest.fixture(scope="function")
    def create_test_users(app):
        with app.app_context():
            _db.drop_all()
            _db.create_all()
    
>           user = User(
                username="testuser",
                email="testuser@example.com",
                password=generate_password_hash("password123"),
                role="customer"
            )

tests\conftest.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\sqlalchemy\orm\state.py:566: in _initialize_instance
    manager.dispatch.init(self, args, kwargs)
venv\lib\site-packages\sqlalchemy\event\attr.py:497: in __call__
    fn(*args, **kw)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4407: in _event_on_init
    instrumenting_mapper._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: http://localhost:3000
Database tables created!
================================== FAILURES ===================================
________________________________ test_register ________________________________

client = <FlaskClient <Flask 'app'>>

    def test_register(client):
        response = client.post('/api/register', json={
            "username": "newuser",
            "email": "newuser@example.com",
            "password": "password123",
            "confirmPassword": "password123"
        })
>       assert response.status_code == 201
E       assert 400 == 201
E        +  where 400 = <WrapperTestResponse streamed [400 BAD REQUEST]>.status_code

tests\test_auth.py:10: AssertionError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: http://localhost:3000
Database tables created!
CORS_ORIGIN: http://localhost:3000
Database tables created!
_____________________________ test_get_characters _____________________________

client = <FlaskClient <Flask 'app'>>

    def test_get_characters(client):
>       response = client.get("/api/kits")

tests\test_kits.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\werkzeug\test.py:1162: in get
    return self.open(*args, **kw)
venv\lib\site-packages\flask\testing.py:234: in open
    response = super().open(
venv\lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
venv\lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
venv\lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
venv\lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
app\routes\kit_routes.py:38: in get_kits
    query = select(Kit).options(joinedload(Kit.age), joinedload(Kit.category))
venv\lib\site-packages\sqlalchemy\orm\strategy_options.py:2436: in joinedload
    return _generate_from_keys(Load.joinedload, keys, False, kw)
venv\lib\site-packages\sqlalchemy\orm\strategy_options.py:2346: in _generate_from_keys
    lead_element = Load(lead_entity)
venv\lib\site-packages\sqlalchemy\orm\strategy_options.py:1033: in __init__
    insp._post_inspect
venv\lib\site-packages\sqlalchemy\util\langhelpers.py:1253: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2722: in _post_inspect
    self._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
_________________________ test_unsubscribe_newsletter _________________________

client = <FlaskClient <Flask 'app'>>

    def test_unsubscribe_newsletter(client):
>       client.post("/api/newsletter/subscribe", json={
            "email": "remove@newsletter.com",
            "newsletter_value": "2"
        })

tests\test_newsletter_routes.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\werkzeug\test.py:1167: in post
    return self.open(*args, **kw)
venv\lib\site-packages\flask\testing.py:234: in open
    response = super().open(
venv\lib\site-packages\werkzeug\test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\lib\site-packages\flask\app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
venv\lib\site-packages\flask\app.py:1514: in wsgi_app
    response = self.handle_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
venv\lib\site-packages\flask\app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
venv\lib\site-packages\flask\app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
app\routes\newsletter_routes.py:21: in subscribe
    if Newsletter.query.filter_by(email=email).first():
venv\lib\site-packages\flask_sqlalchemy\model.py:22: in __get__
    return cls.query_class(
venv\lib\site-packages\sqlalchemy\orm\query.py:275: in __init__
    self._set_entities(entities)
venv\lib\site-packages\sqlalchemy\orm\query.py:287: in _set_entities
    self._raw_columns = [
venv\lib\site-packages\sqlalchemy\orm\query.py:288: in <listcomp>
    coercions.expect(
venv\lib\site-packages\sqlalchemy\sql\coercions.py:388: in expect
    insp._post_inspect
venv\lib\site-packages\sqlalchemy\util\langhelpers.py:1253: in __get__
    obj.__dict__[self.__name__] = result = self.fget(obj)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2722: in _post_inspect
    self._check_configure()
venv\lib\site-packages\sqlalchemy\orm\mapper.py:2399: in _check_configure
    _configure_registries({self.registry}, cascade=True)
venv\lib\site-packages\sqlalchemy\orm\mapper.py:4215: in _configure_registries
    _do_configure_registries(registries, cascade)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

registries = set(), cascade = True

    @util.preload_module("sqlalchemy.orm.decl_api")
    def _do_configure_registries(
        registries: Set[_RegistryType], cascade: bool
    ) -> None:
        registry = util.preloaded.orm_decl_api.registry
    
        orig = set(registries)
    
        for reg in registry._recurse_with_dependencies(registries):
            has_skip = False
    
            for mapper in reg._mappers_to_configure():
                run_configure = None
    
                for fn in mapper.dispatch.before_mapper_configured:
                    run_configure = fn(mapper, mapper.class_)
                    if run_configure is EXT_SKIP:
                        has_skip = True
                        break
                if run_configure is EXT_SKIP:
                    continue
    
                if getattr(mapper, "_configure_failed", False):
                    e = sa_exc.InvalidRequestError(
                        "One or more mappers failed to initialize - "
                        "can't proceed with initialization of other "
                        "mappers. Triggering mapper: '%s'. "
                        "Original exception was: %s"
                        % (mapper, mapper._configure_failed)
                    )
                    e._configure_failed = mapper._configure_failed  # type: ignore
>                   raise e
E                   sqlalchemy.exc.InvalidRequestError: One or more mappers failed to initialize - can't proceed with initialization of other mappers. Triggering mapper: 'Mapper[Purchase(purchases)]'. Original exception was: Mapper 'Mapper[Kit(kits)]' has no property 'purchases'.  If this property was indicated from other mappers or configure events, ensure registry.configure() has been called.

venv\lib\site-packages\sqlalchemy\orm\mapper.py:4252: InvalidRequestError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: http://localhost:3000
Database tables created!
=========================== short test summary info ===========================
FAILED tests/test_auth.py::test_register - assert 400 == 201
FAILED tests/test_kits.py::test_get_characters - sqlalchemy.exc.InvalidReques...
FAILED tests/test_newsletter_routes.py::test_unsubscribe_newsletter - sqlalch...
ERROR tests/test_auth.py::test_login - sqlalchemy.exc.InvalidRequestError: On...
ERROR tests/test_cart_routes.py::test_get_empty_cart - sqlalchemy.exc.Invalid...
ERROR tests/test_cart_routes.py::test_add_to_cart - sqlalchemy.exc.InvalidReq...
ERROR tests/test_cart_routes.py::test_update_cart_quantity - sqlalchemy.exc.I...
ERROR tests/test_cart_routes.py::test_delete_cart_item - sqlalchemy.exc.Inval...
ERROR tests/test_favorites.py::test_get_favorites - sqlalchemy.exc.InvalidReq...
ERROR tests/test_kits.py::test_create_character - sqlalchemy.exc.InvalidReque...
ERROR tests/test_newsletter.py::test_get_newsletter_emails - sqlalchemy.exc.I...
ERROR tests/test_purchases.py::test_list_purchases - sqlalchemy.exc.InvalidRe...
ERROR tests/test_purchases.py::test_checkout - sqlalchemy.exc.InvalidRequestE...
ERROR tests/test_reviews.py::test_get_reviews - sqlalchemy.exc.InvalidRequest...
ERROR tests/test_reviews.py::test_post_review - sqlalchemy.exc.InvalidRequest...
ERROR tests/test_user_settings.py::test_update_email - sqlalchemy.exc.Invalid...
ERROR tests/test_user_settings.py::test_update_password - sqlalchemy.exc.Inva...
================== 3 failed, 15 passed, 14 errors in 29.04s ===================
