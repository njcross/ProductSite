============================= test session starts =============================
platform win32 -- Python 3.10.11, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\njcro\m7project\backend
configfile: pytest.ini
plugins: Flask-Dance-6.0.0, flask-1.3.0
collected 40 items

tests\test_auth.py ...                                                   [  7%]
tests\test_auth_routes.py .                                              [ 10%]
tests\test_cart.py .                                                     [ 12%]
tests\test_cart_routes.py ....                                           [ 22%]
tests\test_content.py .                                                  [ 25%]
tests\test_content_routes.py .                                           [ 27%]
tests\test_favorite.py .                                                 [ 30%]
tests\test_favorite_routes.py .                                          [ 32%]
tests\test_favorites.py .                                                [ 35%]
tests\test_health_routes.py ..                                           [ 40%]
tests\test_inventory_routes.py ....                                      [ 50%]
tests\test_kit_routes.py .                                               [ 52%]
tests\test_kits.py ..                                                    [ 57%]
tests\test_newsletter.py ..                                              [ 62%]
tests\test_newsletter_routes.py ...                                      [ 70%]
tests\test_purchase_routes.py .F                                         [ 75%]
tests\test_purchases.py .F                                               [ 80%]
tests\test_review_routes.py .                                            [ 82%]
tests\test_reviews.py ..                                                 [ 87%]
tests\test_user_settings.py ....                                         [ 97%]
tests\test_user_settings_routes.py .                                     [100%]

================================== FAILURES ===================================
____________________________ test_create_purchase _____________________________

admin_logged_in_client = <FlaskClient <Flask 'app'>>
admin_auth_header = {'Authorization': 'Bearer '}
create_test_kit_and_inventory = (<Kit 1>, <Inventory 1>)

    def test_create_purchase(admin_logged_in_client, admin_auth_header, create_test_kit_and_inventory):
        kit,inventory = create_test_kit_and_inventory
>       response = admin_logged_in_client.post("/api/purchases", json={"kit_id": kit.id, "quantity": 2, "inventory_id": inventory.id}, headers=admin_auth_header)

tests\test_purchase_routes.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\werkzeug\test.py:1248: in post
    return self.open(*args, **kw)
venv\lib\site-packages\flask\testing.py:238: in open
    response = super().open(
venv\lib\site-packages\werkzeug\test.py:1197: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1069: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1345: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\lib\site-packages\flask\app.py:2552: in __call__
    return self.wsgi_app(environ, start_response)
venv\lib\site-packages\flask\app.py:2532: in wsgi_app
    response = self.handle_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:2529: in wsgi_app
    response = self.full_dispatch_request()
venv\lib\site-packages\flask\app.py:1825: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:1823: in full_dispatch_request
    rv = self.dispatch_request()
venv\lib\site-packages\flask\app.py:1799: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
app\utils\decorators.py:11: in wrapper
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @purchase_bp.route('/api/purchases', methods=['POST'])
    @login_required
    def create_purchase():
        data = request.get_json()
    
        new_purchase = Purchase(
            kit_id=data['kit_id'],
            user_id=session.get('user_id'),
            quantity=data['quantity'],
            inventory_id=data.get('inventory_id'),
            payment_method=data.get('payment_method'),
            available_date="1234",
>           pick_up_date=datetime.now(datetime.timezone.utc) + timedelta(hours=24)
        )
E       AttributeError: type object 'datetime.datetime' has no attribute 'timezone'. Did you mean: 'astimezone'?

app\routes\purchase_routes.py:26: AttributeError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: ['http://localhost:3000', 'http://www.localhost:3000']
Database tables created!
________________________________ test_checkout ________________________________

client = <FlaskClient <Flask 'app'>>
user_auth_header = {'Authorization': 'Bearer '}
create_test_kit_and_inventory = (<Kit 1>, <Inventory 1>)

    def test_checkout(client, user_auth_header, create_test_kit_and_inventory):
        # First add kit to cart
        kit, inventory = create_test_kit_and_inventory
        res = client.post("/api/cart", json={"kit_id": kit.id, "quantity": 1}, headers=user_auth_header)
        assert res.status_code == 201
>       res = client.post("/api/purchases", json={
            "kit_id": kit.id,
            "quantity": 1,
            "inventory_id": inventory.id
        }, headers=user_auth_header)

tests\test_purchases.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\werkzeug\test.py:1248: in post
    return self.open(*args, **kw)
venv\lib\site-packages\flask\testing.py:238: in open
    response = super().open(
venv\lib\site-packages\werkzeug\test.py:1197: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1069: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\lib\site-packages\werkzeug\test.py:1345: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\lib\site-packages\flask\app.py:2552: in __call__
    return self.wsgi_app(environ, start_response)
venv\lib\site-packages\flask\app.py:2532: in wsgi_app
    response = self.handle_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:2529: in wsgi_app
    response = self.full_dispatch_request()
venv\lib\site-packages\flask\app.py:1825: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\lib\site-packages\flask\app.py:1823: in full_dispatch_request
    rv = self.dispatch_request()
venv\lib\site-packages\flask\app.py:1799: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
app\utils\decorators.py:11: in wrapper
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @purchase_bp.route('/api/purchases', methods=['POST'])
    @login_required
    def create_purchase():
        data = request.get_json()
    
        new_purchase = Purchase(
            kit_id=data['kit_id'],
            user_id=session.get('user_id'),
            quantity=data['quantity'],
            inventory_id=data.get('inventory_id'),
            payment_method=data.get('payment_method'),
            available_date="1234",
>           pick_up_date=datetime.now(datetime.timezone.utc) + timedelta(hours=24)
        )
E       AttributeError: type object 'datetime.datetime' has no attribute 'timezone'. Did you mean: 'astimezone'?

app\routes\purchase_routes.py:26: AttributeError
=========================== short test summary info ===========================
FAILED tests/test_purchase_routes.py::test_create_purchase - AttributeError: ...
FAILED tests/test_purchases.py::test_checkout - AttributeError: type object '...
======================== 2 failed, 38 passed in 48.82s ========================
