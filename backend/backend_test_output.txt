============================= test session starts =============================
platform win32 -- Python 3.13.1, pytest-8.2.1, pluggy-1.5.0
rootdir: C:\Users\njcro\m7project\backend
configfile: pytest.ini
plugins: Flask-Dance-6.0.0, flask-1.3.0
collected 43 items

tests\test_auth.py ...                                                   [  6%]
tests\test_auth_routes.py .                                              [  9%]
tests\test_cart.py .                                                     [ 11%]
tests\test_cart_routes.py ....                                           [ 20%]
tests\test_content.py .                                                  [ 23%]
tests\test_content_routes.py .                                           [ 25%]
tests\test_favorite.py .                                                 [ 27%]
tests\test_favorite_routes.py .                                          [ 30%]
tests\test_favorites.py .                                                [ 32%]
tests\test_health_routes.py ..                                           [ 37%]
tests\test_inventory_routes.py ....                                      [ 46%]
tests\test_kit_routes.py .                                               [ 48%]
tests\test_kits.py ..                                                    [ 53%]
tests\test_newsletter.py ..                                              [ 58%]
tests\test_newsletter_routes.py ...                                      [ 65%]
tests\test_purchase_routes.py .F                                         [ 69%]
tests\test_purchases.py .F                                               [ 74%]
tests\test_resource.py .                                                 [ 76%]
tests\test_resource_routes.py ..                                         [ 81%]
tests\test_review_routes.py .                                            [ 83%]
tests\test_reviews.py ..                                                 [ 88%]
tests\test_user_settings.py ....                                         [ 97%]
tests\test_user_settings_routes.py .                                     [100%]

================================== FAILURES ===================================
____________________________ test_create_purchase _____________________________

admin_logged_in_client = <FlaskClient <Flask 'app'>>
admin_auth_header = {'Authorization': 'Bearer '}
create_test_kit_and_inventory = (<Kit 1>, <Inventory 1>)

    def test_create_purchase(admin_logged_in_client, admin_auth_header, create_test_kit_and_inventory):
        kit,inventory = create_test_kit_and_inventory
>       response = admin_logged_in_client.post("/api/purchases", json={"kit_id": kit.id, "quantity": 2, "inventory_id": inventory.id}, headers=admin_auth_header)

tests\test_purchase_routes.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\Lib\site-packages\werkzeug\test.py:1248: in post
    return self.open(*args, **kw)
venv\Lib\site-packages\flask\testing.py:238: in open
    response = super().open(
venv\Lib\site-packages\werkzeug\test.py:1197: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv\Lib\site-packages\werkzeug\test.py:1069: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\Lib\site-packages\werkzeug\test.py:1345: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\Lib\site-packages\flask\app.py:2552: in __call__
    return self.wsgi_app(environ, start_response)
venv\Lib\site-packages\flask\app.py:2532: in wsgi_app
    response = self.handle_exception(e)
venv\Lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\Lib\site-packages\flask\app.py:2529: in wsgi_app
    response = self.full_dispatch_request()
venv\Lib\site-packages\flask\app.py:1825: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\Lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\Lib\site-packages\flask\app.py:1823: in full_dispatch_request
    rv = self.dispatch_request()
venv\Lib\site-packages\flask\app.py:1799: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
app\utils\decorators.py:11: in wrapper
    return f(*args, **kwargs)
app\routes\purchase_routes.py:40: in create_purchase
    return jsonify(purchase_schema.dump(purchase)), 201
venv\Lib\site-packages\marshmallow\schema.py:545: in dump
    result = self._serialize(processed_obj, many=many)
venv\Lib\site-packages\marshmallow\schema.py:513: in _serialize
    value = field_obj.serialize(attr_name, obj, accessor=self.get_attribute)
venv\Lib\site-packages\marshmallow\fields.py:348: in serialize
    return self._serialize(value, attr, obj, **kwargs)
venv\Lib\site-packages\marshmallow\fields.py:650: in _serialize
    schema = self.schema
venv\Lib\site-packages\marshmallow\fields.py:628: in schema
    schema_class = class_registry.get_class(nested, all=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

classname = 'InventorySchema', all = False

    def get_class(classname: str, all: bool = False) -> list[SchemaType] | SchemaType:
        """Retrieve a class from the registry.
    
        :raises: marshmallow.exceptions.RegistryError if the class cannot be found
            or if there are multiple entries for the given class name.
        """
        try:
            classes = _registry[classname]
        except KeyError as error:
            raise RegistryError(
                f"Class with name {classname!r} was not found. You may need "
                "to import the class."
            ) from error
        if len(classes) > 1:
            if all:
                return _registry[classname]
>           raise RegistryError(
                f"Multiple classes with name {classname!r} "
                "were found. Please use the full, "
                "module-qualified path."
            )
E           marshmallow.exceptions.RegistryError: Multiple classes with name 'InventorySchema' were found. Please use the full, module-qualified path.

venv\Lib\site-packages\marshmallow\class_registry.py:98: RegistryError
---------------------------- Captured stdout setup ----------------------------
CORS_ORIGIN: ['http://localhost:3000', 'http://www.localhost:3000']
Database tables created!
________________________________ test_checkout ________________________________

client = <FlaskClient <Flask 'app'>>
user_auth_header = {'Authorization': 'Bearer '}
create_test_kit_and_inventory = (<Kit 1>, <Inventory 1>)

    def test_checkout(client, user_auth_header, create_test_kit_and_inventory):
        # First add kit to cart
        kit, inventory = create_test_kit_and_inventory
        res = client.post("/api/cart", json={"kit_id": kit.id, "quantity": 1}, headers=user_auth_header)
        assert res.status_code == 201
>       res = client.post("/api/purchases", json={
            "kit_id": kit.id,
            "quantity": 1,
            "inventory_id": inventory.id
        }, headers=user_auth_header)

tests\test_purchases.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\Lib\site-packages\werkzeug\test.py:1248: in post
    return self.open(*args, **kw)
venv\Lib\site-packages\flask\testing.py:238: in open
    response = super().open(
venv\Lib\site-packages\werkzeug\test.py:1197: in open
    response = self.run_wsgi_app(request.environ, buffered=buffered)
venv\Lib\site-packages\werkzeug\test.py:1069: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
venv\Lib\site-packages\werkzeug\test.py:1345: in run_wsgi_app
    app_rv = app(environ, start_response)
venv\Lib\site-packages\flask\app.py:2552: in __call__
    return self.wsgi_app(environ, start_response)
venv\Lib\site-packages\flask\app.py:2532: in wsgi_app
    response = self.handle_exception(e)
venv\Lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\Lib\site-packages\flask\app.py:2529: in wsgi_app
    response = self.full_dispatch_request()
venv\Lib\site-packages\flask\app.py:1825: in full_dispatch_request
    rv = self.handle_user_exception(e)
venv\Lib\site-packages\flask_cors\extension.py:194: in wrapped_function
    return cors_after_request(app.make_response(f(*args, **kwargs)))
venv\Lib\site-packages\flask\app.py:1823: in full_dispatch_request
    rv = self.dispatch_request()
venv\Lib\site-packages\flask\app.py:1799: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)
app\utils\decorators.py:11: in wrapper
    return f(*args, **kwargs)
app\routes\purchase_routes.py:40: in create_purchase
    return jsonify(purchase_schema.dump(purchase)), 201
venv\Lib\site-packages\marshmallow\schema.py:545: in dump
    result = self._serialize(processed_obj, many=many)
venv\Lib\site-packages\marshmallow\schema.py:513: in _serialize
    value = field_obj.serialize(attr_name, obj, accessor=self.get_attribute)
venv\Lib\site-packages\marshmallow\fields.py:348: in serialize
    return self._serialize(value, attr, obj, **kwargs)
venv\Lib\site-packages\marshmallow\fields.py:650: in _serialize
    schema = self.schema
venv\Lib\site-packages\marshmallow\fields.py:628: in schema
    schema_class = class_registry.get_class(nested, all=False)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

classname = 'InventorySchema', all = False

    def get_class(classname: str, all: bool = False) -> list[SchemaType] | SchemaType:
        """Retrieve a class from the registry.
    
        :raises: marshmallow.exceptions.RegistryError if the class cannot be found
            or if there are multiple entries for the given class name.
        """
        try:
            classes = _registry[classname]
        except KeyError as error:
            raise RegistryError(
                f"Class with name {classname!r} was not found. You may need "
                "to import the class."
            ) from error
        if len(classes) > 1:
            if all:
                return _registry[classname]
>           raise RegistryError(
                f"Multiple classes with name {classname!r} "
                "were found. Please use the full, "
                "module-qualified path."
            )
E           marshmallow.exceptions.RegistryError: Multiple classes with name 'InventorySchema' were found. Please use the full, module-qualified path.

venv\Lib\site-packages\marshmallow\class_registry.py:98: RegistryError
=========================== short test summary info ===========================
FAILED tests/test_purchase_routes.py::test_create_purchase - marshmallow.exce...
FAILED tests/test_purchases.py::test_checkout - marshmallow.exceptions.Regist...
=================== 2 failed, 41 passed in 62.64s (0:01:02) ===================
